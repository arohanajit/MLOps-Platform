services:
  # MinIO (S3 alternative)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # PostgreSQL
  postgres:
    image: postgres:14-alpine
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mlops
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for feature store
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # Kafka and Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    ports:
      - "8081:8081"
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  # MLflow for experiment tracking with psycopg2 installed
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    ports:
      - "5001:5000"
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      MLFLOW_TRACKING_URI: http://localhost:5001
    entrypoint: >
      bash -c "pip install psycopg2-binary boto3 && 
      mlflow server 
      --host 0.0.0.0 
      --backend-store-uri postgresql://postgres:postgres@postgres:5432/mlops
      --default-artifact-root s3://mlflow/"
    depends_on:
      - postgres
      - minio

  # Create required bucket in MinIO
  minio-setup:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (mc config host add minio http://minio:9000 minioadmin minioadmin) do echo 'Waiting for MinIO to be ready...' && sleep 1; done;
      mc mb minio/mlflow --ignore-existing;
      exit 0;
      "

  # Feature registry API (development mode)
  feature-registry:
    build:
      context: .
      dockerfile: src/feature_registry/Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: mlops
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      LOG_LEVEL: DEBUG
      DEV_MODE: "true"
      PYTHONPATH: /app
    volumes:
      - ./src:/app/src
    depends_on:
      - postgres
    command: ["uvicorn", "src.feature_registry.api:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Feature store API (development mode)
  feature-store:
    build:
      context: .
      dockerfile: src/feature_store/Dockerfile.dev
    ports:
      - "8001:8000"
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: mlops
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      FEATURE_REGISTRY_URL: http://feature-registry:8000
      LOG_LEVEL: DEBUG
      DEV_MODE: "true"
      PYTHONPATH: /app
    volumes:
      - ./src:/app/src
    depends_on:
      - redis
      - postgres
      - feature-registry
    command: ["uvicorn", "src.feature_store.api:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

volumes:
  minio_data:
  postgres_data:
  redis_data:
  zookeeper_data:
  kafka_data: 