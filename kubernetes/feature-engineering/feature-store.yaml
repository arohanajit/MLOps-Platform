---
apiVersion: v1
kind: ConfigMap
metadata:
  name: feature-store-config
  namespace: feature-engineering
data:
  REDIS_HOST: "redis-master.storage.svc.cluster.local"
  REDIS_PORT: "6379"
  POSTGRES_HOST: "postgresql.storage.svc.cluster.local"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "mlops"
  LOG_LEVEL: "INFO"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: feature-store
  namespace: feature-engineering
  labels:
    app: feature-store
    component: storage
spec:
  replicas: 2
  selector:
    matchLabels:
      app: feature-store
  template:
    metadata:
      labels:
        app: feature-store
    spec:
      containers:
      - name: feature-store
        image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/mlops-platform/feature-store:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"
        env:
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: feature-store-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: feature-store-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: password
              optional: true
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: feature-store-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: feature-store-config
              key: POSTGRES_PORT
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: feature-store-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: feature-store-config
              key: LOG_LEVEL
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: feature-store
  namespace: feature-engineering
  labels:
    app: feature-store
spec:
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: feature-store
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: feature-store-ingress
  namespace: feature-engineering
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
  - http:
      paths:
      - path: /api/feature-store(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: feature-store
            port:
              number: 80 