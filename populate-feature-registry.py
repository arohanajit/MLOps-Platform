#!/usr/bin/env python3
"""
Feature Registry Population Script

This script populates the Feature Registry with sample feature definitions
for demonstration purposes.
"""

import argparse
import json
import logging
import os
import sys
from typing import Dict, List, Any, Optional

import requests

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("PopulateFeatureRegistry")

# Default Feature Registry URL (can be overridden with command line args)
FEATURE_REGISTRY_URL = os.environ.get("FEATURE_REGISTRY_URL", "http://localhost:8000")


def populate_feature_registry(registry_url: str):
    """
    Populate the Feature Registry with sample feature definitions.
    
    Args:
        registry_url: URL of the Feature Registry API
    """
    # Define sample feature definitions
    sample_features = [
        # Customer Features
        {
            "name": "customer_days_since_last_active",
            "description": "Number of days since the customer was last active",
            "entity_type": "customer",
            "value_type": "INTEGER",
            "source": "DERIVED",
            "category": "BEHAVIORAL",
            "frequency": "DAILY",
            "owner": "data_science_team",
            "tags": ["recency", "engagement", "core"],
            "transformations": [
                {"type": "max", "field": "event_timestamp", "alias": "last_active"},
                {"type": "datediff", "args": ["current_date", "last_active"]}
            ]
        },
        {
            "name": "customer_event_count",
            "description": "Total number of events generated by the customer",
            "entity_type": "customer",
            "value_type": "INTEGER",
            "source": "DERIVED",
            "category": "BEHAVIORAL",
            "frequency": "DAILY",
            "owner": "data_science_team",
            "tags": ["frequency", "engagement", "core"],
            "transformations": [
                {"type": "count", "field": "*"}
            ]
        },
        {
            "name": "customer_active_days",
            "description": "Number of days the customer was active",
            "entity_type": "customer",
            "value_type": "INTEGER",
            "source": "DERIVED",
            "category": "BEHAVIORAL",
            "frequency": "DAILY",
            "owner": "data_science_team",
            "tags": ["frequency", "engagement", "core"],
            "transformations": [
                {"type": "distinct_count", "field": "date(event_timestamp)"}
            ]
        },
        # Product Features
        {
            "name": "product_view_count",
            "description": "Number of times a product was viewed",
            "entity_type": "product",
            "value_type": "INTEGER",
            "source": "DERIVED",
            "category": "POPULARITY",
            "frequency": "DAILY",
            "owner": "data_science_team",
            "tags": ["popularity", "core"],
            "transformations": [
                {"type": "count", "field": "*", "filter": "event_type = 'view'"}
            ]
        },
        {
            "name": "product_purchase_count",
            "description": "Number of times a product was purchased",
            "entity_type": "product",
            "value_type": "INTEGER",
            "source": "DERIVED",
            "category": "POPULARITY",
            "frequency": "DAILY",
            "owner": "data_science_team",
            "tags": ["popularity", "conversion", "core"],
            "transformations": [
                {"type": "count", "field": "*", "filter": "event_type = 'purchase'"}
            ]
        },
        {
            "name": "product_cart_count",
            "description": "Number of times a product was added to cart",
            "entity_type": "product",
            "value_type": "INTEGER",
            "source": "DERIVED",
            "category": "POPULARITY",
            "frequency": "DAILY",
            "owner": "data_science_team",
            "tags": ["popularity", "conversion", "core"],
            "transformations": [
                {"type": "count", "field": "*", "filter": "event_type = 'add_to_cart'"}
            ]
        },
        # Customer-Product Features
        {
            "name": "customer_product_interaction_count",
            "description": "Total number of interactions between a customer and a product",
            "entity_type": "customer_product",
            "value_type": "INTEGER",
            "source": "DERIVED",
            "category": "INTERACTION",
            "frequency": "DAILY",
            "owner": "data_science_team",
            "tags": ["interaction", "recommendations", "core"],
            "transformations": [
                {"type": "count", "field": "*"}
            ]
        },
        {
            "name": "customer_product_view_count",
            "description": "Number of times a customer viewed a product",
            "entity_type": "customer_product",
            "value_type": "INTEGER",
            "source": "DERIVED",
            "category": "INTERACTION",
            "frequency": "DAILY",
            "owner": "data_science_team",
            "tags": ["interaction", "recommendations", "core"],
            "transformations": [
                {"type": "count", "field": "*", "filter": "event_type = 'view'"}
            ]
        },
        {
            "name": "customer_product_cart_count",
            "description": "Number of times a customer added a product to cart",
            "entity_type": "customer_product",
            "value_type": "INTEGER",
            "source": "DERIVED",
            "category": "INTERACTION",
            "frequency": "DAILY",
            "owner": "data_science_team",
            "tags": ["interaction", "recommendations", "conversion", "core"],
            "transformations": [
                {"type": "count", "field": "*", "filter": "event_type = 'add_to_cart'"}
            ]
        },
        {
            "name": "customer_product_purchase_count",
            "description": "Number of times a customer purchased a product",
            "entity_type": "customer_product",
            "value_type": "INTEGER",
            "source": "DERIVED",
            "category": "INTERACTION",
            "frequency": "DAILY",
            "owner": "data_science_team",
            "tags": ["interaction", "recommendations", "conversion", "core"],
            "transformations": [
                {"type": "count", "field": "*", "filter": "event_type = 'purchase'"}
            ]
        },
        # Advanced Features
        {
            "name": "customer_purchase_frequency",
            "description": "Average number of purchases per active day",
            "entity_type": "customer",
            "value_type": "FLOAT",
            "source": "DERIVED",
            "category": "BEHAVIORAL",
            "frequency": "DAILY",
            "owner": "data_science_team",
            "tags": ["frequency", "monetization", "advanced"],
            "transformations": [
                {"type": "count", "field": "*", "filter": "event_type = 'purchase'", "alias": "purchase_count"},
                {"type": "distinct_count", "field": "date(event_timestamp)", "alias": "active_days"},
                {"type": "division", "args": ["purchase_count", "active_days"]}
            ]
        },
        {
            "name": "product_conversion_rate",
            "description": "Percentage of views that result in purchase",
            "entity_type": "product",
            "value_type": "FLOAT",
            "source": "DERIVED",
            "category": "CONVERSION",
            "frequency": "DAILY",
            "owner": "data_science_team",
            "tags": ["conversion", "monetization", "advanced"],
            "transformations": [
                {"type": "count", "field": "*", "filter": "event_type = 'view'", "alias": "view_count"},
                {"type": "count", "field": "*", "filter": "event_type = 'purchase'", "alias": "purchase_count"},
                {"type": "division", "args": ["purchase_count", "view_count"]}
            ]
        }
    ]
    
    # Define sample feature groups
    sample_feature_groups = [
        {
            "name": "customer_engagement_features",
            "description": "Features measuring customer engagement",
            "entity_type": "customer",
            "owner": "data_science_team",
            "tags": ["engagement", "core"],
            "feature_names": [
                "customer_days_since_last_active",
                "customer_event_count",
                "customer_active_days"
            ]
        },
        {
            "name": "product_popularity_features",
            "description": "Features measuring product popularity",
            "entity_type": "product",
            "owner": "data_science_team",
            "tags": ["popularity", "core"],
            "feature_names": [
                "product_view_count",
                "product_purchase_count",
                "product_cart_count"
            ]
        },
        {
            "name": "customer_product_interaction_features",
            "description": "Features measuring customer-product interactions",
            "entity_type": "customer_product",
            "owner": "data_science_team",
            "tags": ["interaction", "recommendations", "core"],
            "feature_names": [
                "customer_product_interaction_count",
                "customer_product_view_count",
                "customer_product_cart_count",
                "customer_product_purchase_count"
            ]
        },
        {
            "name": "conversion_features",
            "description": "Features measuring conversion",
            "entity_type": "mixed",
            "owner": "data_science_team",
            "tags": ["conversion", "monetization", "advanced"],
            "feature_names": [
                "customer_purchase_frequency",
                "product_conversion_rate",
                "customer_product_cart_count",
                "customer_product_purchase_count"
            ]
        }
    ]
    
    # Register features
    features_registered = 0
    for feature in sample_features:
        try:
            response = requests.post(
                f"{registry_url}/features",
                json=feature
            )
            
            if response.status_code == 200 or response.status_code == 201:
                logger.info(f"Successfully registered feature: {feature['name']}")
                features_registered += 1
            else:
                logger.warning(f"Failed to register feature {feature['name']}: {response.text}")
        except Exception as e:
            logger.error(f"Error registering feature {feature['name']}: {str(e)}")
    
    logger.info(f"Registered {features_registered} features")
    
    # Register feature groups
    groups_registered = 0
    for group in sample_feature_groups:
        try:
            # First create the group
            group_data = {
                "name": group["name"],
                "description": group["description"],
                "entity_type": group["entity_type"],
                "owner": group["owner"],
                "tags": group["tags"]
            }
            
            response = requests.post(
                f"{registry_url}/feature-groups",
                json=group_data
            )
            
            if response.status_code == 200 or response.status_code == 201:
                logger.info(f"Successfully created feature group: {group['name']}")
                
                # Get the group ID
                group_id = response.json().get("id")
                
                # Add features to the group
                for feature_name in group["feature_names"]:
                    try:
                        # Get feature ID
                        feature_response = requests.get(
                            f"{registry_url}/features/name/{feature_name}"
                        )
                        
                        if feature_response.status_code == 200:
                            feature_id = feature_response.json().get("id")
                            
                            # Add feature to group
                            add_response = requests.post(
                                f"{registry_url}/feature-groups/{group_id}/features/{feature_id}"
                            )
                            
                            if add_response.status_code == 200 or add_response.status_code == 201:
                                logger.info(f"Added feature {feature_name} to group {group['name']}")
                            else:
                                logger.warning(f"Failed to add feature {feature_name} to group {group['name']}: {add_response.text}")
                        else:
                            logger.warning(f"Failed to retrieve feature {feature_name}: {feature_response.text}")
                    except Exception as e:
                        logger.error(f"Error adding feature {feature_name} to group {group['name']}: {str(e)}")
                
                groups_registered += 1
            else:
                logger.warning(f"Failed to create feature group {group['name']}: {response.text}")
        except Exception as e:
            logger.error(f"Error creating feature group {group['name']}: {str(e)}")
    
    logger.info(f"Registered {groups_registered} feature groups")
    
    logger.info("Feature Registry population completed")


def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="Populate Feature Registry with sample definitions")
    
    parser.add_argument(
        "--registry-url",
        type=str,
        default=FEATURE_REGISTRY_URL,
        help=f"URL of the Feature Registry API (default: {FEATURE_REGISTRY_URL})"
    )
    
    return parser.parse_args()


def main():
    """Main function."""
    args = parse_args()
    
    try:
        # Check if Feature Registry is accessible
        try:
            response = requests.get(f"{args.registry_url}/health")
            if response.status_code != 200:
                logger.error(f"Feature Registry is not accessible at {args.registry_url}")
                sys.exit(1)
        except Exception as e:
            logger.error(f"Error connecting to Feature Registry at {args.registry_url}: {str(e)}")
            sys.exit(1)
        
        # Populate Feature Registry
        populate_feature_registry(args.registry_url)
        
        logger.info("Feature Registry population completed successfully")
    except Exception as e:
        logger.error(f"Error populating Feature Registry: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main() 